server:
  port: 8081

spring:
  application:
    name: order-api-app
  kafka:
    bootstrap-servers: kafka:19091
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring.json.type.mapping: orderRequest:com.example.library.OrderRequestDTO
  liquibase:
    change-log: changelog-master.xml
    enabled: true
app:
  async:
    thread-pool:
      core-size: ${ASYNC_CORE_POOL_SIZE:4}
      max-size: ${ASYNC_MAX_POOL_SIZE:4}
      queue-capacity: ${ASYNC_QUEUE_CAPACITY:100}
      thread-name-prefix: ${ASYNC_THREAD_PREFIX:AsyncTask-}
      wait-for-tasks: ${ASYNC_WAIT_FOR_TASKS:true}
resilience4j:
  circuitbreaker:
    instances:
      kafkaService:
        registerHealthIndicator: true
        slidingWindowSize: 10
        minimumNumberOfCalls: 5
        failureRateThreshold: 50
        waitDurationInOpenState: 10s
        permittedNumberOfCallsInHalfOpenState: 3
        automaticTransitionFromOpenToHalfOpenEnabled: true
  # Konfiguracja retry
  retry:
    instances:
      kafkaService:
        maxAttempts: 3
        waitDuration: 1s
        retryExceptions:
          - org.springframework.kafka.KafkaException
          - java.io.IOException
          - java.net.SocketTimeoutException
  timelimiter:
    instances:
      kafkaService:
        timeoutDuration: 3s

management:
  endpoints:
    web:
      exposure:
        include: health,info,circuitbreakers,retries
  endpoint:
    health:
      show-details: always
      show-components: always
  health:
    circuitbreakers:
      enabled: true
    retries:
      enabled: true
eureka:
  client:
    serviceUrl:
      defaultZone: http://eureka-server:8761/eureka